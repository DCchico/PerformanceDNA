import torch
import argparse
import os
from torchvision.models import resnet50, ResNet50_Weights
from transformers import BertModel
import torch._dynamo as dynamo

# Suppress minor warnings
import warnings
warnings.filterwarnings("ignore")

def get_model_and_input(model_name, batch_size=1):
    """
    Loads a pretrained model and creates a dummy input tensor.
    This is a simplified version of the one in the benchmark script.
    """
    if model_name == "resnet50":
        model = resnet50(weights=ResNet50_Weights.IMAGENET1K_V2).eval()
        dummy_input = torch.randn(batch_size, 3, 224, 224)
        return model, (dummy_input,) # Return input as a tuple
        
    elif model_name == "bert-base-uncased":
        model = BertModel.from_pretrained("bert-base-uncased").eval()
        sequence_length = 512
        dummy_input = torch.randint(0, 30000, (batch_size, sequence_length), dtype=torch.long)
        return model, (dummy_input,) # Return input as a tuple

    else:
        raise ValueError(f"Model '{model_name}' not supported.")

def main(args):
    """
    Main function to extract and save the FX graph.
    """
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    if not torch.cuda.is_available():
        print("CUDA not available.")
        return

    print(f"Extracting FX graph for model: {args.model}")
    print(f"Using device: {device}")

    # Get the model and a tuple of its inputs
    base_model, dummy_input_tuple = get_model_and_input(args.model)
    base_model.to(device)
    dummy_input_tuple = tuple(t.to(device) for t in dummy_input_tuple)
    
    try:
        # Use torch._dynamo.export() to capture the graph
        # This runs the model once and traces its operations into an FX graph.
        print("Exporting model to FX graph...")
        graph_module, guards = dynamo.export(
            base_model,
            *dummy_input_tuple,
        )
        print("Export successful!")

        # --- Save the human-readable graph ---
        results_dir = "../results"
        os.makedirs(results_dir, exist_ok=True)
        graph_filename = f"{args.model}_dynamo_graph.txt"
        graph_filepath = os.path.join(results_dir, graph_filename)
        
        print(f"Saving graph to: {graph_filepath}")
        
        with open(graph_filepath, 'w') as f:
            f.write(f"# FX Graph for {args.model}\n")
            f.write("# (Generated by torch._dynamo.export)\n\n")
            # The .code attribute provides a Python-like representation
            f.write(graph_module.code)

        print(f"\nSuccessfully saved graph for {args.model}.")

    except Exception as e:
        print(f"\n!!! Failed to extract FX graph for {args.model}: {e} !!!")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PyTorch Dynamo FX Graph Extractor")
    parser.add_argument("--model", type=str, default="resnet50", help="Model to extract graph from (e.g., resnet50, bert-base-uncased)")
    args = parser.parse_args()
    main(args)
